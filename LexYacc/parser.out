Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> query
Rule 1     query -> forclauses whereclause returnclause
Rule 2     query -> forclauses returnclause
Rule 3     forclauses -> forclauses forclause
Rule 4     forclauses -> forclause
Rule 5     forclause -> FOR exprs
Rule 6     whereclause -> WHERE wexprs
Rule 7     wexprs -> wexprs AND wexpr
Rule 8     wexprs -> wexpr
Rule 9     wexpr -> VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr
Rule 10    wexpr -> VARIABLE condition VARIABLE DOT pathexpr
Rule 11    wexpr -> VARIABLE condition VARIABLE
Rule 12    wexpr -> VARIABLE DOT pathexpr condition STRING
Rule 13    wexpr -> VARIABLE condition STRING
Rule 14    wexpr -> VARIABLE DOT pathexpr condition NUMBER
Rule 15    wexpr -> VARIABLE condition NUMBER
Rule 16    wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN
Rule 17    wexpr -> CONTAINS LPAREN VARIABLE COMMA STRING RPAREN
Rule 18    condition -> EQUAL
Rule 19    condition -> NOTEQUAL
Rule 20    condition -> GREATEREQUAL
Rule 21    condition -> GREATERTHAN
Rule 22    condition -> LESSEQUAL
Rule 23    condition -> LESSTHAN
Rule 24    exprs -> exprs COMMA expr
Rule 25    exprs -> expr
Rule 26    expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
Rule 27    expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN
Rule 28    expr -> rexpr
Rule 29    pathexpr -> pathexpr DOT step
Rule 30    pathexpr -> step
Rule 31    step -> NAME LBRACKET selector RBRACKET
Rule 32    step -> NAME
Rule 33    selector -> <empty>
Rule 34    selector -> NUMBER
Rule 35    returnclause -> RETURN rexpr
Rule 36    rexpr -> VARIABLE DOT pathexpr
Rule 37    rexpr -> VARIABLE
Rule 38    rexpr -> LCBRACKET jsoncontents RCBRACKET
Rule 39    jsoncontents -> jsoncontents COMMA jsoncontent
Rule 40    jsoncontents -> jsoncontent
Rule 41    jsoncontent -> STRING COLON rexpr

Terminals, with rules where they appear

AND                  : 7
COLON                : 41
COMMA                : 16 17 24 39
CONTAINS             : 16 17
DOT                  : 9 9 10 12 14 16 26 29 36
EQUAL                : 18
FILENAME             : 26 27
FOR                  : 5
GREATEREQUAL         : 20
GREATERTHAN          : 21
IN                   : 26 27
INVERTEDCOMMA        : 26 26 27 27
JSONLINES            : 26 27
LBRACKET             : 31
LCBRACKET            : 38
LESSEQUAL            : 22
LESSTHAN             : 23
LPAREN               : 16 17 26 27
NAME                 : 31 32
NOTEQUAL             : 19
NUMBER               : 14 15 34
RBRACKET             : 31
RCBRACKET            : 38
RETURN               : 35
RPAREN               : 16 17 26 27
STRING               : 12 13 16 17 41
VARIABLE             : 9 9 10 10 11 11 12 13 14 15 16 17 26 27 36 37
WHERE                : 6
error                : 

Nonterminals, with rules where they appear

condition            : 9 10 11 12 13 14 15
expr                 : 24 25
exprs                : 5 24
forclause            : 3 4
forclauses           : 1 2 3
jsoncontent          : 39 40
jsoncontents         : 38 39
pathexpr             : 9 9 10 12 14 16 26 29 36
query                : 0
returnclause         : 1 2
rexpr                : 28 35 41
selector             : 31
step                 : 29 30
wexpr                : 7 8
wexprs               : 6 7
whereclause          : 1

Parsing method: LALR

state 0

    (0) S' -> . query
    (1) query -> . forclauses whereclause returnclause
    (2) query -> . forclauses returnclause
    (3) forclauses -> . forclauses forclause
    (4) forclauses -> . forclause
    (5) forclause -> . FOR exprs

    FOR             shift and go to state 4

    query                          shift and go to state 1
    forclauses                     shift and go to state 2
    forclause                      shift and go to state 3

state 1

    (0) S' -> query .



state 2

    (1) query -> forclauses . whereclause returnclause
    (2) query -> forclauses . returnclause
    (3) forclauses -> forclauses . forclause
    (6) whereclause -> . WHERE wexprs
    (35) returnclause -> . RETURN rexpr
    (5) forclause -> . FOR exprs

    WHERE           shift and go to state 8
    RETURN          shift and go to state 9
    FOR             shift and go to state 4

    whereclause                    shift and go to state 5
    returnclause                   shift and go to state 6
    forclause                      shift and go to state 7

state 3

    (4) forclauses -> forclause .

    WHERE           reduce using rule 4 (forclauses -> forclause .)
    RETURN          reduce using rule 4 (forclauses -> forclause .)
    FOR             reduce using rule 4 (forclauses -> forclause .)


state 4

    (5) forclause -> FOR . exprs
    (24) exprs -> . exprs COMMA expr
    (25) exprs -> . expr
    (26) expr -> . VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> . VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN
    (28) expr -> . rexpr
    (36) rexpr -> . VARIABLE DOT pathexpr
    (37) rexpr -> . VARIABLE
    (38) rexpr -> . LCBRACKET jsoncontents RCBRACKET

    VARIABLE        shift and go to state 12
    LCBRACKET       shift and go to state 14

    exprs                          shift and go to state 10
    expr                           shift and go to state 11
    rexpr                          shift and go to state 13

state 5

    (1) query -> forclauses whereclause . returnclause
    (35) returnclause -> . RETURN rexpr

    RETURN          shift and go to state 9

    returnclause                   shift and go to state 15

state 6

    (2) query -> forclauses returnclause .

    $end            reduce using rule 2 (query -> forclauses returnclause .)


state 7

    (3) forclauses -> forclauses forclause .

    WHERE           reduce using rule 3 (forclauses -> forclauses forclause .)
    RETURN          reduce using rule 3 (forclauses -> forclauses forclause .)
    FOR             reduce using rule 3 (forclauses -> forclauses forclause .)


state 8

    (6) whereclause -> WHERE . wexprs
    (7) wexprs -> . wexprs AND wexpr
    (8) wexprs -> . wexpr
    (9) wexpr -> . VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr
    (10) wexpr -> . VARIABLE condition VARIABLE DOT pathexpr
    (11) wexpr -> . VARIABLE condition VARIABLE
    (12) wexpr -> . VARIABLE DOT pathexpr condition STRING
    (13) wexpr -> . VARIABLE condition STRING
    (14) wexpr -> . VARIABLE DOT pathexpr condition NUMBER
    (15) wexpr -> . VARIABLE condition NUMBER
    (16) wexpr -> . CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN
    (17) wexpr -> . CONTAINS LPAREN VARIABLE COMMA STRING RPAREN

    VARIABLE        shift and go to state 18
    CONTAINS        shift and go to state 19

    wexprs                         shift and go to state 16
    wexpr                          shift and go to state 17

state 9

    (35) returnclause -> RETURN . rexpr
    (36) rexpr -> . VARIABLE DOT pathexpr
    (37) rexpr -> . VARIABLE
    (38) rexpr -> . LCBRACKET jsoncontents RCBRACKET

    VARIABLE        shift and go to state 21
    LCBRACKET       shift and go to state 14

    rexpr                          shift and go to state 20

state 10

    (5) forclause -> FOR exprs .
    (24) exprs -> exprs . COMMA expr

    WHERE           reduce using rule 5 (forclause -> FOR exprs .)
    RETURN          reduce using rule 5 (forclause -> FOR exprs .)
    FOR             reduce using rule 5 (forclause -> FOR exprs .)
    COMMA           shift and go to state 22


state 11

    (25) exprs -> expr .

    COMMA           reduce using rule 25 (exprs -> expr .)
    WHERE           reduce using rule 25 (exprs -> expr .)
    RETURN          reduce using rule 25 (exprs -> expr .)
    FOR             reduce using rule 25 (exprs -> expr .)


state 12

    (26) expr -> VARIABLE . IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE . IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN
    (36) rexpr -> VARIABLE . DOT pathexpr
    (37) rexpr -> VARIABLE .

    IN              shift and go to state 23
    DOT             shift and go to state 24
    COMMA           reduce using rule 37 (rexpr -> VARIABLE .)
    WHERE           reduce using rule 37 (rexpr -> VARIABLE .)
    RETURN          reduce using rule 37 (rexpr -> VARIABLE .)
    FOR             reduce using rule 37 (rexpr -> VARIABLE .)


state 13

    (28) expr -> rexpr .

    COMMA           reduce using rule 28 (expr -> rexpr .)
    WHERE           reduce using rule 28 (expr -> rexpr .)
    RETURN          reduce using rule 28 (expr -> rexpr .)
    FOR             reduce using rule 28 (expr -> rexpr .)


state 14

    (38) rexpr -> LCBRACKET . jsoncontents RCBRACKET
    (39) jsoncontents -> . jsoncontents COMMA jsoncontent
    (40) jsoncontents -> . jsoncontent
    (41) jsoncontent -> . STRING COLON rexpr

    STRING          shift and go to state 27

    jsoncontents                   shift and go to state 25
    jsoncontent                    shift and go to state 26

state 15

    (1) query -> forclauses whereclause returnclause .

    $end            reduce using rule 1 (query -> forclauses whereclause returnclause .)


state 16

    (6) whereclause -> WHERE wexprs .
    (7) wexprs -> wexprs . AND wexpr

    RETURN          reduce using rule 6 (whereclause -> WHERE wexprs .)
    AND             shift and go to state 28


state 17

    (8) wexprs -> wexpr .

    AND             reduce using rule 8 (wexprs -> wexpr .)
    RETURN          reduce using rule 8 (wexprs -> wexpr .)


state 18

    (9) wexpr -> VARIABLE . DOT pathexpr condition VARIABLE DOT pathexpr
    (10) wexpr -> VARIABLE . condition VARIABLE DOT pathexpr
    (11) wexpr -> VARIABLE . condition VARIABLE
    (12) wexpr -> VARIABLE . DOT pathexpr condition STRING
    (13) wexpr -> VARIABLE . condition STRING
    (14) wexpr -> VARIABLE . DOT pathexpr condition NUMBER
    (15) wexpr -> VARIABLE . condition NUMBER
    (18) condition -> . EQUAL
    (19) condition -> . NOTEQUAL
    (20) condition -> . GREATEREQUAL
    (21) condition -> . GREATERTHAN
    (22) condition -> . LESSEQUAL
    (23) condition -> . LESSTHAN

    DOT             shift and go to state 29
    EQUAL           shift and go to state 31
    NOTEQUAL        shift and go to state 32
    GREATEREQUAL    shift and go to state 33
    GREATERTHAN     shift and go to state 34
    LESSEQUAL       shift and go to state 35
    LESSTHAN        shift and go to state 36

    condition                      shift and go to state 30

state 19

    (16) wexpr -> CONTAINS . LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN
    (17) wexpr -> CONTAINS . LPAREN VARIABLE COMMA STRING RPAREN

    LPAREN          shift and go to state 37


state 20

    (35) returnclause -> RETURN rexpr .

    $end            reduce using rule 35 (returnclause -> RETURN rexpr .)


state 21

    (36) rexpr -> VARIABLE . DOT pathexpr
    (37) rexpr -> VARIABLE .

    DOT             shift and go to state 24
    $end            reduce using rule 37 (rexpr -> VARIABLE .)
    RCBRACKET       reduce using rule 37 (rexpr -> VARIABLE .)
    COMMA           reduce using rule 37 (rexpr -> VARIABLE .)


state 22

    (24) exprs -> exprs COMMA . expr
    (26) expr -> . VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> . VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN
    (28) expr -> . rexpr
    (36) rexpr -> . VARIABLE DOT pathexpr
    (37) rexpr -> . VARIABLE
    (38) rexpr -> . LCBRACKET jsoncontents RCBRACKET

    VARIABLE        shift and go to state 12
    LCBRACKET       shift and go to state 14

    expr                           shift and go to state 38
    rexpr                          shift and go to state 13

state 23

    (26) expr -> VARIABLE IN . JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN . JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN

    JSONLINES       shift and go to state 39


state 24

    (36) rexpr -> VARIABLE DOT . pathexpr
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 40
    step                           shift and go to state 41

state 25

    (38) rexpr -> LCBRACKET jsoncontents . RCBRACKET
    (39) jsoncontents -> jsoncontents . COMMA jsoncontent

    RCBRACKET       shift and go to state 43
    COMMA           shift and go to state 44


state 26

    (40) jsoncontents -> jsoncontent .

    RCBRACKET       reduce using rule 40 (jsoncontents -> jsoncontent .)
    COMMA           reduce using rule 40 (jsoncontents -> jsoncontent .)


state 27

    (41) jsoncontent -> STRING . COLON rexpr

    COLON           shift and go to state 45


state 28

    (7) wexprs -> wexprs AND . wexpr
    (9) wexpr -> . VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr
    (10) wexpr -> . VARIABLE condition VARIABLE DOT pathexpr
    (11) wexpr -> . VARIABLE condition VARIABLE
    (12) wexpr -> . VARIABLE DOT pathexpr condition STRING
    (13) wexpr -> . VARIABLE condition STRING
    (14) wexpr -> . VARIABLE DOT pathexpr condition NUMBER
    (15) wexpr -> . VARIABLE condition NUMBER
    (16) wexpr -> . CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN
    (17) wexpr -> . CONTAINS LPAREN VARIABLE COMMA STRING RPAREN

    VARIABLE        shift and go to state 18
    CONTAINS        shift and go to state 19

    wexpr                          shift and go to state 46

state 29

    (9) wexpr -> VARIABLE DOT . pathexpr condition VARIABLE DOT pathexpr
    (12) wexpr -> VARIABLE DOT . pathexpr condition STRING
    (14) wexpr -> VARIABLE DOT . pathexpr condition NUMBER
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 47
    step                           shift and go to state 41

state 30

    (10) wexpr -> VARIABLE condition . VARIABLE DOT pathexpr
    (11) wexpr -> VARIABLE condition . VARIABLE
    (13) wexpr -> VARIABLE condition . STRING
    (15) wexpr -> VARIABLE condition . NUMBER

    VARIABLE        shift and go to state 48
    STRING          shift and go to state 49
    NUMBER          shift and go to state 50


state 31

    (18) condition -> EQUAL .

    VARIABLE        reduce using rule 18 (condition -> EQUAL .)
    STRING          reduce using rule 18 (condition -> EQUAL .)
    NUMBER          reduce using rule 18 (condition -> EQUAL .)


state 32

    (19) condition -> NOTEQUAL .

    VARIABLE        reduce using rule 19 (condition -> NOTEQUAL .)
    STRING          reduce using rule 19 (condition -> NOTEQUAL .)
    NUMBER          reduce using rule 19 (condition -> NOTEQUAL .)


state 33

    (20) condition -> GREATEREQUAL .

    VARIABLE        reduce using rule 20 (condition -> GREATEREQUAL .)
    STRING          reduce using rule 20 (condition -> GREATEREQUAL .)
    NUMBER          reduce using rule 20 (condition -> GREATEREQUAL .)


state 34

    (21) condition -> GREATERTHAN .

    VARIABLE        reduce using rule 21 (condition -> GREATERTHAN .)
    STRING          reduce using rule 21 (condition -> GREATERTHAN .)
    NUMBER          reduce using rule 21 (condition -> GREATERTHAN .)


state 35

    (22) condition -> LESSEQUAL .

    VARIABLE        reduce using rule 22 (condition -> LESSEQUAL .)
    STRING          reduce using rule 22 (condition -> LESSEQUAL .)
    NUMBER          reduce using rule 22 (condition -> LESSEQUAL .)


state 36

    (23) condition -> LESSTHAN .

    VARIABLE        reduce using rule 23 (condition -> LESSTHAN .)
    STRING          reduce using rule 23 (condition -> LESSTHAN .)
    NUMBER          reduce using rule 23 (condition -> LESSTHAN .)


state 37

    (16) wexpr -> CONTAINS LPAREN . VARIABLE DOT pathexpr COMMA STRING RPAREN
    (17) wexpr -> CONTAINS LPAREN . VARIABLE COMMA STRING RPAREN

    VARIABLE        shift and go to state 51


state 38

    (24) exprs -> exprs COMMA expr .

    COMMA           reduce using rule 24 (exprs -> exprs COMMA expr .)
    WHERE           reduce using rule 24 (exprs -> exprs COMMA expr .)
    RETURN          reduce using rule 24 (exprs -> exprs COMMA expr .)
    FOR             reduce using rule 24 (exprs -> exprs COMMA expr .)


state 39

    (26) expr -> VARIABLE IN JSONLINES . LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES . LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN

    LPAREN          shift and go to state 52


state 40

    (36) rexpr -> VARIABLE DOT pathexpr .
    (29) pathexpr -> pathexpr . DOT step

    COMMA           reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    WHERE           reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    RETURN          reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    FOR             reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    $end            reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    RCBRACKET       reduce using rule 36 (rexpr -> VARIABLE DOT pathexpr .)
    DOT             shift and go to state 53


state 41

    (30) pathexpr -> step .

    DOT             reduce using rule 30 (pathexpr -> step .)
    COMMA           reduce using rule 30 (pathexpr -> step .)
    WHERE           reduce using rule 30 (pathexpr -> step .)
    RETURN          reduce using rule 30 (pathexpr -> step .)
    FOR             reduce using rule 30 (pathexpr -> step .)
    $end            reduce using rule 30 (pathexpr -> step .)
    RCBRACKET       reduce using rule 30 (pathexpr -> step .)
    EQUAL           reduce using rule 30 (pathexpr -> step .)
    NOTEQUAL        reduce using rule 30 (pathexpr -> step .)
    GREATEREQUAL    reduce using rule 30 (pathexpr -> step .)
    GREATERTHAN     reduce using rule 30 (pathexpr -> step .)
    LESSEQUAL       reduce using rule 30 (pathexpr -> step .)
    LESSTHAN        reduce using rule 30 (pathexpr -> step .)
    AND             reduce using rule 30 (pathexpr -> step .)


state 42

    (31) step -> NAME . LBRACKET selector RBRACKET
    (32) step -> NAME .

    LBRACKET        shift and go to state 54
    DOT             reduce using rule 32 (step -> NAME .)
    COMMA           reduce using rule 32 (step -> NAME .)
    WHERE           reduce using rule 32 (step -> NAME .)
    RETURN          reduce using rule 32 (step -> NAME .)
    FOR             reduce using rule 32 (step -> NAME .)
    $end            reduce using rule 32 (step -> NAME .)
    RCBRACKET       reduce using rule 32 (step -> NAME .)
    EQUAL           reduce using rule 32 (step -> NAME .)
    NOTEQUAL        reduce using rule 32 (step -> NAME .)
    GREATEREQUAL    reduce using rule 32 (step -> NAME .)
    GREATERTHAN     reduce using rule 32 (step -> NAME .)
    LESSEQUAL       reduce using rule 32 (step -> NAME .)
    LESSTHAN        reduce using rule 32 (step -> NAME .)
    AND             reduce using rule 32 (step -> NAME .)


state 43

    (38) rexpr -> LCBRACKET jsoncontents RCBRACKET .

    COMMA           reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)
    WHERE           reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)
    RETURN          reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)
    FOR             reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)
    $end            reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)
    RCBRACKET       reduce using rule 38 (rexpr -> LCBRACKET jsoncontents RCBRACKET .)


state 44

    (39) jsoncontents -> jsoncontents COMMA . jsoncontent
    (41) jsoncontent -> . STRING COLON rexpr

    STRING          shift and go to state 27

    jsoncontent                    shift and go to state 55

state 45

    (41) jsoncontent -> STRING COLON . rexpr
    (36) rexpr -> . VARIABLE DOT pathexpr
    (37) rexpr -> . VARIABLE
    (38) rexpr -> . LCBRACKET jsoncontents RCBRACKET

    VARIABLE        shift and go to state 21
    LCBRACKET       shift and go to state 14

    rexpr                          shift and go to state 56

state 46

    (7) wexprs -> wexprs AND wexpr .

    AND             reduce using rule 7 (wexprs -> wexprs AND wexpr .)
    RETURN          reduce using rule 7 (wexprs -> wexprs AND wexpr .)


state 47

    (9) wexpr -> VARIABLE DOT pathexpr . condition VARIABLE DOT pathexpr
    (12) wexpr -> VARIABLE DOT pathexpr . condition STRING
    (14) wexpr -> VARIABLE DOT pathexpr . condition NUMBER
    (29) pathexpr -> pathexpr . DOT step
    (18) condition -> . EQUAL
    (19) condition -> . NOTEQUAL
    (20) condition -> . GREATEREQUAL
    (21) condition -> . GREATERTHAN
    (22) condition -> . LESSEQUAL
    (23) condition -> . LESSTHAN

    DOT             shift and go to state 53
    EQUAL           shift and go to state 31
    NOTEQUAL        shift and go to state 32
    GREATEREQUAL    shift and go to state 33
    GREATERTHAN     shift and go to state 34
    LESSEQUAL       shift and go to state 35
    LESSTHAN        shift and go to state 36

    condition                      shift and go to state 57

state 48

    (10) wexpr -> VARIABLE condition VARIABLE . DOT pathexpr
    (11) wexpr -> VARIABLE condition VARIABLE .

    DOT             shift and go to state 58
    AND             reduce using rule 11 (wexpr -> VARIABLE condition VARIABLE .)
    RETURN          reduce using rule 11 (wexpr -> VARIABLE condition VARIABLE .)


state 49

    (13) wexpr -> VARIABLE condition STRING .

    AND             reduce using rule 13 (wexpr -> VARIABLE condition STRING .)
    RETURN          reduce using rule 13 (wexpr -> VARIABLE condition STRING .)


state 50

    (15) wexpr -> VARIABLE condition NUMBER .

    AND             reduce using rule 15 (wexpr -> VARIABLE condition NUMBER .)
    RETURN          reduce using rule 15 (wexpr -> VARIABLE condition NUMBER .)


state 51

    (16) wexpr -> CONTAINS LPAREN VARIABLE . DOT pathexpr COMMA STRING RPAREN
    (17) wexpr -> CONTAINS LPAREN VARIABLE . COMMA STRING RPAREN

    DOT             shift and go to state 59
    COMMA           shift and go to state 60


state 52

    (26) expr -> VARIABLE IN JSONLINES LPAREN . INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES LPAREN . INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN

    INVERTEDCOMMA   shift and go to state 61


state 53

    (29) pathexpr -> pathexpr DOT . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    step                           shift and go to state 62

state 54

    (31) step -> NAME LBRACKET . selector RBRACKET
    (33) selector -> .
    (34) selector -> . NUMBER

    RBRACKET        reduce using rule 33 (selector -> .)
    NUMBER          shift and go to state 64

    selector                       shift and go to state 63

state 55

    (39) jsoncontents -> jsoncontents COMMA jsoncontent .

    RCBRACKET       reduce using rule 39 (jsoncontents -> jsoncontents COMMA jsoncontent .)
    COMMA           reduce using rule 39 (jsoncontents -> jsoncontents COMMA jsoncontent .)


state 56

    (41) jsoncontent -> STRING COLON rexpr .

    RCBRACKET       reduce using rule 41 (jsoncontent -> STRING COLON rexpr .)
    COMMA           reduce using rule 41 (jsoncontent -> STRING COLON rexpr .)


state 57

    (9) wexpr -> VARIABLE DOT pathexpr condition . VARIABLE DOT pathexpr
    (12) wexpr -> VARIABLE DOT pathexpr condition . STRING
    (14) wexpr -> VARIABLE DOT pathexpr condition . NUMBER

    VARIABLE        shift and go to state 65
    STRING          shift and go to state 66
    NUMBER          shift and go to state 67


state 58

    (10) wexpr -> VARIABLE condition VARIABLE DOT . pathexpr
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 68
    step                           shift and go to state 41

state 59

    (16) wexpr -> CONTAINS LPAREN VARIABLE DOT . pathexpr COMMA STRING RPAREN
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 69
    step                           shift and go to state 41

state 60

    (17) wexpr -> CONTAINS LPAREN VARIABLE COMMA . STRING RPAREN

    STRING          shift and go to state 70


state 61

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA . FILENAME INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA . FILENAME INVERTEDCOMMA RPAREN

    FILENAME        shift and go to state 71


state 62

    (29) pathexpr -> pathexpr DOT step .

    DOT             reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    COMMA           reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    WHERE           reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    RETURN          reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    FOR             reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    $end            reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    RCBRACKET       reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    EQUAL           reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    NOTEQUAL        reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    GREATEREQUAL    reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    GREATERTHAN     reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    LESSEQUAL       reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    LESSTHAN        reduce using rule 29 (pathexpr -> pathexpr DOT step .)
    AND             reduce using rule 29 (pathexpr -> pathexpr DOT step .)


state 63

    (31) step -> NAME LBRACKET selector . RBRACKET

    RBRACKET        shift and go to state 72


state 64

    (34) selector -> NUMBER .

    RBRACKET        reduce using rule 34 (selector -> NUMBER .)


state 65

    (9) wexpr -> VARIABLE DOT pathexpr condition VARIABLE . DOT pathexpr

    DOT             shift and go to state 73


state 66

    (12) wexpr -> VARIABLE DOT pathexpr condition STRING .

    AND             reduce using rule 12 (wexpr -> VARIABLE DOT pathexpr condition STRING .)
    RETURN          reduce using rule 12 (wexpr -> VARIABLE DOT pathexpr condition STRING .)


state 67

    (14) wexpr -> VARIABLE DOT pathexpr condition NUMBER .

    AND             reduce using rule 14 (wexpr -> VARIABLE DOT pathexpr condition NUMBER .)
    RETURN          reduce using rule 14 (wexpr -> VARIABLE DOT pathexpr condition NUMBER .)


state 68

    (10) wexpr -> VARIABLE condition VARIABLE DOT pathexpr .
    (29) pathexpr -> pathexpr . DOT step

    AND             reduce using rule 10 (wexpr -> VARIABLE condition VARIABLE DOT pathexpr .)
    RETURN          reduce using rule 10 (wexpr -> VARIABLE condition VARIABLE DOT pathexpr .)
    DOT             shift and go to state 53


state 69

    (16) wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr . COMMA STRING RPAREN
    (29) pathexpr -> pathexpr . DOT step

    COMMA           shift and go to state 74
    DOT             shift and go to state 53


state 70

    (17) wexpr -> CONTAINS LPAREN VARIABLE COMMA STRING . RPAREN

    RPAREN          shift and go to state 75


state 71

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME . INVERTEDCOMMA RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME . INVERTEDCOMMA RPAREN

    INVERTEDCOMMA   shift and go to state 76


state 72

    (31) step -> NAME LBRACKET selector RBRACKET .

    DOT             reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    COMMA           reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    WHERE           reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    RETURN          reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    FOR             reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    $end            reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    RCBRACKET       reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    EQUAL           reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    NOTEQUAL        reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    GREATEREQUAL    reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    GREATERTHAN     reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    LESSEQUAL       reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    LESSTHAN        reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)
    AND             reduce using rule 31 (step -> NAME LBRACKET selector RBRACKET .)


state 73

    (9) wexpr -> VARIABLE DOT pathexpr condition VARIABLE DOT . pathexpr
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 77
    step                           shift and go to state 41

state 74

    (16) wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA . STRING RPAREN

    STRING          shift and go to state 78


state 75

    (17) wexpr -> CONTAINS LPAREN VARIABLE COMMA STRING RPAREN .

    AND             reduce using rule 17 (wexpr -> CONTAINS LPAREN VARIABLE COMMA STRING RPAREN .)
    RETURN          reduce using rule 17 (wexpr -> CONTAINS LPAREN VARIABLE COMMA STRING RPAREN .)


state 76

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA . RPAREN DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA . RPAREN

    RPAREN          shift and go to state 79


state 77

    (9) wexpr -> VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr .
    (29) pathexpr -> pathexpr . DOT step

    AND             reduce using rule 9 (wexpr -> VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr .)
    RETURN          reduce using rule 9 (wexpr -> VARIABLE DOT pathexpr condition VARIABLE DOT pathexpr .)
    DOT             shift and go to state 53


state 78

    (16) wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING . RPAREN

    RPAREN          shift and go to state 80


state 79

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN . DOT pathexpr
    (27) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN .

    DOT             shift and go to state 81
    COMMA           reduce using rule 27 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN .)
    WHERE           reduce using rule 27 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN .)
    RETURN          reduce using rule 27 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN .)
    FOR             reduce using rule 27 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN .)


state 80

    (16) wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN .

    AND             reduce using rule 16 (wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN .)
    RETURN          reduce using rule 16 (wexpr -> CONTAINS LPAREN VARIABLE DOT pathexpr COMMA STRING RPAREN .)


state 81

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT . pathexpr
    (29) pathexpr -> . pathexpr DOT step
    (30) pathexpr -> . step
    (31) step -> . NAME LBRACKET selector RBRACKET
    (32) step -> . NAME

    NAME            shift and go to state 42

    pathexpr                       shift and go to state 82
    step                           shift and go to state 41

state 82

    (26) expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr .
    (29) pathexpr -> pathexpr . DOT step

    COMMA           reduce using rule 26 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr .)
    WHERE           reduce using rule 26 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr .)
    RETURN          reduce using rule 26 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr .)
    FOR             reduce using rule 26 (expr -> VARIABLE IN JSONLINES LPAREN INVERTEDCOMMA FILENAME INVERTEDCOMMA RPAREN DOT pathexpr .)
    DOT             shift and go to state 53

